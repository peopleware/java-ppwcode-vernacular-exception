# -----------------------------------------------------------------------------
# Copyright 2004 PeopleWare n.v.
# -----------------------------------------------------------------------------

maven.xdoc.date=left
## maven.xdoc.version=${pom.currentVersion}



# -----------------------------------------------------------------------------
# Java Plugin (compiler)
# See http://maven.apache.org/reference/plugins/java/properties.html
# -----------------------------------------------------------------------------

maven.compile.source=1.4
# Specifies the source version for the Java compiler.
# Corresponds to the source attribute for the ant javac task. This
# value defaults to 1.3 so that builds on JDK 1.4 or later stil work on
# earlier JVMs. Valid values are 1.3, 1.4, 1.5.

# maven.compile.compilerargs
# Provides arguments to a compiler when maven.compile.fork is set to true
# Corresponds to the nested compilerarg element for the ant javac task.

maven.compile.debug=on
# Specifies wether to include debugging information in the compiled  class
# files; the default value is on.  Used by the "java:compile" goal.

maven.compile.deprecation=on
# Specifies wether source should be compiled with deprecation information;
# the default value is off.  Used by the "java:compile" goal.

maven.compile.optimize=off
# Specifies whether source should be compiled with optimization; the default
# value is off. Used by the "java:compile" goal.

maven.compile.target=1.4
# Generate class files for a specific JVM version
# Corresponds to the target attribute for the ant javac task.  This value
# defaults to 1.1 so that builds on JDK 1.4 or later stil work on  earlier JVMs.



# -----------------------------------------------------------------------------
# Artifact Plugin (deployment)
# See http://maven.apache.org/reference/plugins/artifact/properties.html
# -----------------------------------------------------------------------------

maven.repo.remote=https://${user.name}:${user.password}@cvs.peopleware.be/projects/JavaLibraries/maven-repository,\
                  https://${user.name}:${user.password}@cvs.peopleware.be/projects/Java/maven/repo,\
                  http://www.ibiblio.org/maven

maven.repo.list=cvsppw
# The list of comma separated names of the repositories to which artifacts
# produced by the project will be deployed. E.g.: maven.repo.list=myrepo1,ibiblio
# The names of all other properties are constructed using the entries present in
# this list. Below the set of properties which can be used for configuration of
# deployment process to each of the repositories provided in the list. x in the
# names of those properties should be replaced by actual repository name (like
# ibiblio). In case of doubts see an example.

# Settings for cvsppw
# -------------------

#maven.repo.cvsppw=scpexe://cvs.peopleware.be
# Specifies the URL of remote repository. The URL  should contain the protocol
# name. See the the list of supported protocols. x corresponds to repository
# name defined using maven.repo.list property.

maven.repo.cvsppw.directory=/ppw/projects/JavaLibraries/public_html/maven-repository
# The path on the remote file system where artifacts will be placed

#maven.repo.cvsppw.username=${user.name}
# The user name that will be used to authenticated user if access to repository
# requires authentication.
# TODO jand: I presume saying nothing means the default

maven.repo.cvsppw.group=javalibs
# The remote group (UNIX group) to which  artifact will belong after it will
# be deployed.

#maven.repo.cvsppw.privatekey=PROBLEM
# The absolute path to private key file. This is used only for when protocol
# supports authentication via private/public  key pair.



# -----------------------------------------------------------------------------
# License settings
# http://maven.apache.org/reference/plugins/license/
# -----------------------------------------------------------------------------

# use default /LICENSE.txt file for now; consider creating a more extensive
# text elsewhere



# -----------------------------------------------------------------------------
# Maven JavaDoc Plugin
# See http://maven.apache.org/reference/plugins/javadoc/properties.html
# -----------------------------------------------------------------------------

maven.javadoc.source=1.4

maven.javadoc.customtags=note protected invar basic pre post result init protected.invar protected.post annotation mudo todo idea
#throws deprecated since see version author return param

note.name=note
note.description=Note:
note.enabled=true
note.scope=all

#deprecated.name=deprecated
#deprecated.description=Deprecated
#deprecated.enabled=true

protected.name=protected
protected.description=Information for Subtype Implementors:
protected.enabled=true
protected.scope=all

invar.name=invar
invar.description=Invariants:
invar.enabled=true
invar.scope=types,fields

basic.name=basic
basic.description=Basic inspector
basic.enabled=true
basic.scope=constructors,methods

#param.name=param
#param.description=Param:
#param.enabled=true

pre.name=pre
pre.description=Preconditions:
pre.enabled=true
pre.scope=constructors,methods

post.name=post
post.description=Postconditions:
post.enabled=true
post.scope=constructors,methods

#return.name=return
#return.description=Return:
#return.enabled=true

result.name=result
result.description=Result:
result.enabled=true
result.scope=constructors,methods

#throws.name=throws
#throws.description=Throws:
#throws.enabled=true

init.name=init
init.description=Initially:
init.enabled=true
init.scope=methods

protected.invar.name=protected.invar
protected.invar.description=Protected Invariants:
protected.invar.enabled=true
protected.invar.scope=types,fields

protected.post.name=protected.post
protected.post.description=Protected Postconditions:
protected.post.enabled=true
protected.post.scope=constructors,methods

#see.name=see
#see.description=See:
#see.enabled=true

#author.name=author
#author.description=Author:
#author.enabled=true

annotation.name=annotation
annotation.description=Annotations:
annotation.enabled=true
annotation.scope=all

#version.name=version
#version.description=Version:
#version.enabled=true

#since.name=since
#since.description=Since:
#since.enabled=true

mudo.name=mudo
mudo.description=Must do:
mudo.enabled=true

todo.name=todo
todo.description=To do:
todo.enabled=true

idea.name=idea
idea.description=Idea:
idea.enabled=true

maven.javadoc.mode.online=false

maven.javadoc.offlineLinks=\
https://cvs.peopleware.be/projects/JavaLibraries/ppw-bean-I/apidocs/#${basedir}/../ppw-project-settings/packagelists/ppw-bean-I,\
https://cvs.peopleware.be/projects/JavaLibraries/ppw-bean-II/apidocs/#${basedir}/../ppw-project-settings/packagelists/ppw-bean-II,\
https://cvs.peopleware.be/projects/JavaLibraries/ppw-bean-III/apidocs/#${basedir}/../ppw-project-settings/packagelists/ppw-bean-III,\
https://cvs.peopleware.be/projects/JavaLibraries/ppw-bean-IV/apidocs/#${basedir}/../ppw-project-settings/packagelists/ppw-bean-IV,\
https://cvs.peopleware.be/projects/JavaLibraries/ppw-exception-I/apidocs/#${basedir}/../ppw-project-settings/packagelists/ppw-exception-I,\
https://cvs.peopleware.be/projects/JavaLibraries/ppw-i18n-I/apidocs/#${basedir}/../ppw-project-settings/packagelists/ppw-i18n-I,\
https://cvs.peopleware.be/projects/JavaLibraries/ppw-jsp-I/apidocs/#${basedir}/../ppw-project-settings/packagelists/ppw-jsp-I,\
https://cvs.peopleware.be/projects/JavaLibraries/ppw-servlet-I/apidocs/#${basedir}/../ppw-project-settings/packagelists/ppw-servlet-I,\
https://cvs.peopleware.be/projects/JavaLibraries/ppw-struts-I/apidocs/#${basedir}/../ppw-project-settings/packagelists/ppw-struts-I,\
https://cvs.peopleware.be/projects/JavaLibraries/ppw-struts-II/apidocs/#${basedir}/../ppw-project-settings/packagelists/ppw-struts-II,\
https://cvs.peopleware.be/projects/JavaLibraries/ppw-test-I/apidocs/#${basedir}/../ppw-project-settings/packagelists/ppw-test-I,\
https://cvs.peopleware.be/projects/JavaLibraries/ppw-value-I/apidocs/#${basedir}/../ppw-project-settings/packagelists/ppw-value-I

maven.javadoc.additionalparam=\
-link http://java.sun.com/j2se/1.4.2/docs/api \
-link http://java.sun.com/products/jsp/jstl/1.1/docs/api \
-link http://struts.apache.org/api \
-link http://www.hibernate.org/hib_docs/api

# -----------------------------------------------------------------------------
# FAQ settings
# http://maven.apache.org/reference/plugins/faq/
# -----------------------------------------------------------------------------

# use default settings



# -----------------------------------------------------------------------------
# Changelog settings
# http://maven.apache.org/reference/plugins/changelog/
# -----------------------------------------------------------------------------

maven.changelog.range=3650



# -----------------------------------------------------------------------------
# Maven Checkstyle Plugin
# See http://maven.apache.org/reference/plugins/checkstyle/properties.html
# -----------------------------------------------------------------------------

maven.checkstyle.excludes=**/_Contract_*.java
# Specifies a comma-separated list of Ant patterns to use when matching files
# in the source tree to be excluded from the Checkstyle report. The pattern
# specified is relative to ${maven.src.dir}. The default value is to not
# exclude any files.

maven.checkstyle.properties=${basedir}/../ppw-project-settings/checkstyle-ppw.xml
# Specifies the location of the checkstyle properties that will be  used to
# check the source. Note that you will need to use this property only if you
# don't want to use any of the predefined  formats
# (see maven.checkstyle.format).

#maven.checkstyle.propertiesURL=https://cvs.peopleware.be/projects/Java/CheckStyle/ppw.xml
# Specifies the URL of the checkstyle properties that will be used to check
# the source. Note that you will need to use this property only if you don't
# want to use any of the predefined  formats (see maven.checkstyle.format).

#maven.checkstyle.header.file
# Specifies the location of the License file (a.k.a the header file) that
# is used by Checkstyle to verify that source code has the  correct copyright.
# Default value is ${basedir}/LICENSE.txt

maven.checkstyle.fail.on.violation=false
# Specifies if the maven:check-source task should fail upon a violation.
# This will stop the build  process. The default value is false.

maven.checkstyle.suppressions=${basedir}/checkstyle-suppressions.xml
# Suppresses some checkstyle error in which we are not intrested.



# -----------------------------------------------------------------------------
# PMD settings
# http://maven.apache.org/reference/plugins/pmd/properties.html
# -----------------------------------------------------------------------------

maven.pmd.enable=true
maven.pmd.cpd.enable=true
#default tokencount is 100
maven.pmd.cpd.minimumtokencount=100
maven.pmd.rulesetfiles = ${basedir}/../ppw-project-settings/pmd-config.xml



# -----------------------------------------------------------------------------
# Doccheck Plugin
# See http://maven-doccheck.sourceforge.net/properties.html
# -----------------------------------------------------------------------------

maven.doccheck.source=1.4



# -----------------------------------------------------------------------------
# War Plugin
# See http://maven.apache.org/reference/plugins/war/properties.html
# -----------------------------------------------------------------------------

# run "maven eclipse; maven war:inplace"
# to be able to use the Tomcat plugin in eclipse

#maven.war.src
# Location of the webapp in the source tree. Your WEB-INF directory must be
# located right under ${maven.war.src}. It defaults to ${maven.src.dir}/webapp.

#maven.war.src.includes
# Comma or space separated list of Ant path patterns specifycing  what files and
# directories from ${maven.war.src}  should be included in the web application.
# All files are included by default.

#maven.war.src.excludes
# Comma or space separated list of Ant path patterns specifycing  what files and
# directories from ${maven.war.src}  should be excluded from the web application.
# No files are excluded by default.

#maven.war.webxml
# Location of the web.xml file. It defaults to ${maven.war.src}/WEB-INF/web.xml.

#maven.war.classes.includes
# Classes to include from WEB-INF/classes  Note: Classes are relative to
# ${maven.build.dir}.

#maven.war.classes.excludes
# Classes to exclude from WEB-INF/classes  Note: Classes are relative to
# ${maven.build.dir}.

maven.war.final.name=${pom.artifactId}-${pom.currentVersion}.war
# Name of the war file that is built. Defaults to ${pom.artifactId}.war
# Use ${pom.artifactId}-${pom.currentVersion} to mimic the files created using
# the jar and ear plugins

#maven.war.build.dir
# Directory where the war will be generated. It defaults  to ${maven.build.dir}.

#maven.war.webapp.dir
# Directory where the webapp will be generated. It defaults to
# ${maven.war.build.dir}/${pom.artifactId}.

#maven.war.manifest
# Location of the MANIFEST.MF file in the source tree. It defaults to
# ${maven.war.src}/META-INF/MANIFEST.MF.

maven.war.index=true
# Whether to create an index list to speed up classloading. This is a JDK 1.3+
# specific feature. Defaults to false.

#maven.war.tld.dir
# Subdirectory of web application context root directory where tag library
# descriptors (tld files) will be copied. The Maven WAR Plugin copies to this
# location all dependencies, specified in the POM, of the type tld and marked
# with a property of war.bundle set to true. See the section below for more
# information. It defaults to WEB-INF/tld. This setting is adhering to SUN Code
# Conventions for the JavaServer Pages



# -----------------------------------------------------------------------------
# Eclipse Settings
# See http://maven.apache.org/reference/plugins/eclipse/properties.html
# -----------------------------------------------------------------------------

#maven.eclipse.workspace
# Location of the Eclipse workspace that holds your configuration and source.
# On Windows, this will be the workspace directory under your eclipse installation.
# For example, if you installed eclipse into c:\eclipse, the workspace is
# c:\eclipse\workspace.
# If this parameter is specified, the external-tools goal will use it as the
# destination to copy the generated file.
#
# PPW note: this should be set in your personal settings in ~/build.properties

#maven.eclipse.junit
# The version of JUnit you want added to your project. If this  property is set to
# none then JUnit will not be added to your build classpath.

#maven.eclipse.output.dir
# (default=${maven.build.dest)
# The directory to which Eclipse should output its classes. By default this is
# the same directory as Maven generates its code, however this can be changed so
# that maven clean does not interfere with Eclipse's build.

#maven.eclipse.test.output.dir
# (default=${maven.test.dest} defined in test plugin)
# The directory to which Eclipse should output its test classes.

maven.eclipse.classpath.include=src/toryt
# Comma delimited list of additional source directories to include in the
# classpath, like src/conf.

#maven.eclipse.resources.addtoclasspath
# Specify whether to include the resources defined in the POM in the
# Eclipse classpath. Defaults to false.

#maven.eclipse.conclasspath
# Comma delimited list of additional kind "con" path to include in the classpath
# description file like org.eclipse.pde.core.requiredPlugins

#maven.eclipse.buildcommands
# Comma delimited list of additional build commands to include in the project
# description file.

maven.eclipse.projectnatures=com.sysdeo.eclipse.tomcat.tomcatnature
# Comma delimited list of additional project natures to include in the project
# description file. These natures will be added after the java nature.

#maven.gen.src
# (default=${maven.build.dir}/generated-sources)
# The directory that generated source code is placed. Maven will select any
# directories under this as source code. This prevents the generated source from
# being removed whenever Eclipse does a clean build, and allows the generated code
# to be clearly in the build directory.

#maven.eclipse.src.extension
# (default=zip)
# The extension used for source attachments.



# -----------------------------------------------------------------------------
# Maven StatCvs Plugin Settings
# See http://statcvs-xml.berlios.de/maven-plugin/properties.html
# -----------------------------------------------------------------------------

statcvs.history=true
# Default value is false. When set to  true, the plugin will check out a complete
# copy of all 1.1 revisions of the repository defined in the pom to the target
# directory and fetch the cvs log from there. This will enable StatCvs to
# correctly determine the lines of code for deleted files and directories.

statcvs.verbose=false
# Default value is true. When set to  false, less output will be generated.

#statcvs.title
# Default value is ${pom.name}. The title that will be printed on top of each
# graph.

#statcvs.include
# Default is none. Determines the files to consider when generating the report.
# Uses ant style file-pattern matching. Separate multiple expressions by
# semi-colons, i.e. to only include source files in a C++ project:
# src/**/*.cpp;src/**/*.h

#statcvs.exclude
# Default is none. Determines the files not to consider when generating the
# report. Uses ant style file-pattern  matching. Separate multiple expressions
# by semi-colons, i.e. to exclude Java source files located below src/net:
# src/net/**/*.java

#statcvs.log.options
# Default is none. Passed to the cvs log command. Allows the specification of
# additional parameters like dates: -d 2002-01-01<2002-12-31
# Using partial logs will yield incorrect lines of code.  Please read this
# section of the StatCvs manual on how to avoid that. Do not use the history
# feature when setting a start date.



# -----------------------------------------------------------------------------
# Maven Test Plugin Settings
# See http://maven.apache.org/reference/plugins/test/properties.html
# -----------------------------------------------------------------------------

# bad, incomplete doc


maven.junit.fork=true
# When using Java 1.4, it may be necessary to fork the JUnit tests to prevent
# XML parser issues. The default value is no.
#
# We need it to enable assertions in the test run.

#maven.junit.format
# Specifies the formatter to use for output to the console. Defaults to brief

#maven.junit.dir
# The directory to invoke the VM in. (ignored if fork is disabled). The default
# value is ${basedir}.

#maven.junit.usefile
# If this value is set to false, JUnit test run details will appear on the console
# as the tests are executed. If not, they are stored in a file in the test-reports
# directory. The default value is true.

#maven.junit.printSummary
# If this value is set to false, JUnit test run details will not include test
# summary information for a suite. Default value is true. This parameter corresponds
# to the JUnit Ant task printSummary attribute.

#maven.junit.jvm
# If this property is set it is used as the JVM for the junit tests to run in. This
# is passed to the Ant junit task in the jvm property. If maven.junit.fork is not
# true, this is ignored.

#maven.test.dest
# Specifies the unit test classes directory. This is the location where the java
# classes for the test source code will be generated to. The default value is
# ${maven.build.dir}/test-classes.

#maven.test.skip
# Set this to 'true' to bypass unit tests entirely. Its use is NOT RECOMMENDED,
# but quite convenient on occasion.

#maven.test.failure.ignore
# Set this to true to ignore a failure during testing.  Its use is NOT
# RECOMMENDED, but quite convenient on occasion.

#maven.test.source
# Provide source compatibility with a specific release
# Corresponds to the source attribute for the ant  javac  task.

#maven.iutest.dest
# Specifies the integration unit test classes directory. This is the location where
# the java classes for the integration unit test source code will be generated to.
# The default value is ${maven.build.dir}/iutest-classes.

#maven.iutest.dir
# Specifies the integration unit test source directory. This property should never
# be overridden as the value is determined directly from the project descriptor. The
# default value is  ${maven.integrationUnitTestSourceDirectory}.

#maven.out.test.dir
# Specifies the directory where the integration unit testing is run. The default
# value is ${build.dir}/iutest.

#maven.webapp.dir
# Specifies the directory of the web application used to perform integration unit
# testing. The default value is ${iutest.dir}/testapp.

#maven.conf.test.dir
# Specifies the configuration directory used to build the web application used for
# integration unit testing. The  default value is ${iutest.dir}/cactus.

#maven.tomcat.home
# Specifies your local Tomcat installation directory. The default value is ${tdk.home}.
# If ${tdk.home} is not specified in your ${user.home}/build.properties, you should
# set this property. This is used for the integration unit  testing.

#maven.test.port
# Specifies the port that Tomcat will use for integration unit testing. The
# default value is 8192.

maven.junit.jvmargs=-ea
# If fork is enabled, additional parameters may be passed to the new VM.
# You can specify some args separated by a space. Sample :
# maven.junit.jvmargs=-Xmx160m -verbose

#maven.junit.envvars
# If fork is enabled, additional environment variables may be passed to the new VM.
# You can specify some variable separated by a space. Each variable is describe
# in sub properties. Sample :
# maven.junit.envvars=LD_LIBRARY_PATH
# LD_LIBRARY_PATH=/usr/local/lib

#maven.junit.sysproperties
# Use this property elements to specify system properties required by the class.
# These properties will be made available to the VM during  the execution of the
# test (either Maven's VM or the forked VM, if fork is enabled). You can specify
# system properties separate by space.  Each properties is describe in sub
# properties. Sample :
# maven.junit.sysproperties=prop1 basedir
# prop1=your value
# basedir=${basedir}

#maven.test.search.classdir
# Use this property to specify that JUnit should search the test classes directory
# rather than the source directory. This allows for test cases to be written in
# other languages such as Groovy which generate bytecode that can then be used by
# this plugin. Sample :
# maven.test.search.classdir=true

testmatch=**/Test*
# (required in test:match)
# List of ant patterns (spared by commas) used in test:match goal to specify the
# tests that should run

testnotmatch=**/Abstract*,**/_OLD_*,**/AllTests*
# List of ant patterns (spared by commas) used in test:match goal to specify the
# tests that shouldn't run
