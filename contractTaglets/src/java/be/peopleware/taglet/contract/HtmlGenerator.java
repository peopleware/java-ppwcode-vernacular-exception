package be.peopleware.taglet.contract;

import org.apache.commons.jexl.JexlContext;
import org.apache.commons.jexl.JexlHelper;
import org.apache.commons.jexl.parser.*;

/**
 * @author ashoudou
 * @author Peopleware n.v.
 */
public class HtmlGenerator implements ParserVisitor {
	/* Generated By:JJTree: Do not edit this line. ParserVisitor.java */

  JexlContext jc = JexlHelper.createContext();

	  public Object visit(SimpleNode node, Object data){
  	return null;
  }
	  public Object visit(ASTJexlScript node, Object data) {
		return null;
	}
	  public Object visit(ASTBlock node, Object data) {
		return null;
	}
	  public Object visit(ASTEmptyFunction node, Object data) {
		return null;
	}
	  public Object visit(ASTSizeFunction node, Object data) {
		return null;
	}
	  public Object visit(ASTIdentifier node, Object data) {
		return null;
	}
	  public Object visit(ASTExpression node, Object data) {
		return null;
	}
	  public Object visit(ASTAssignment node, Object data) {
		return null;
	}
	  public Object visit(ASTOrNode node, Object data) {
//	  	StringBuffer acc = (StringBuffer)data;
//	  	assert(node.jjtGetNumChildren() == 2):
//	  								"ASTOrNode must have two children";
//	  	visit((SimpleNode)node.jjtGetChild(0), acc);
//	  	acc.append(" || ");
//	  	visit((SimpleNode)node.jjtGetChild(1), acc);
//	  	return acc;
	  	return null;
	  }
	  public Object visit(ASTAndNode node, Object data) {
		return null;
	}
	  public Object visit(ASTBitwiseOrNode node, Object data) {
		return null;
	}
	  public Object visit(ASTBitwiseXorNode node, Object data) {
		return null;
	}
	  public Object visit(ASTBitwiseAndNode node, Object data) {
		return null;
	}
	  public Object visit(ASTEQNode node, Object data) {
		return null;
	}
	  public Object visit(ASTNENode node, Object data) {
		return null;
	}
	  public Object visit(ASTLTNode node, Object data) {
		return null;
	}
	  public Object visit(ASTGTNode node, Object data) {
		return null;
	}
	  public Object visit(ASTLENode node, Object data) {
		return null;
	}
	  public Object visit(ASTGENode node, Object data) {
		return null;
	}
	  public Object visit(ASTAddNode node, Object data) {
		return null;
	}
	  public Object visit(ASTSubtractNode node, Object data) {
		return null;
	}
	  public Object visit(ASTMulNode node, Object data) {
		return null;
	}
	  public Object visit(ASTDivNode node, Object data) {
		return null;
	}
	  public Object visit(ASTModNode node, Object data) {
		return null;
	}
	  public Object visit(ASTUnaryMinusNode node, Object data) {
		return null;
	}
	  public Object visit(ASTBitwiseComplNode node, Object data) {
		return null;
	}
	  public Object visit(ASTNotNode node, Object data) {
		return null;
	}
	  public Object visit(ASTNullLiteral node, Object data) {
		return null;
	}
	  public Object visit(ASTTrueNode node, Object data) {
		return null;
	}
	  public Object visit(ASTFalseNode node, Object data) {
		return null;
	}
	  public Object visit(ASTIntegerLiteral node, Object data) {
		return null;
	}
	  public Object visit(ASTFloatLiteral node, Object data) {
		return null;
	}
	  public Object visit(ASTStringLiteral node, Object data) {
	  	StringBuffer acc = (StringBuffer)data;
	  	String text = null;
	  	try {
	  		text = (String)node.value(jc);
	  	} catch (Exception e) {
	  		// TODO we have it catched, but what we should do about it?
	  	}
	  	if (text.equals("result") || text.equals("forall")) {
	  		acc.insert(0, "<span style='font: bold; background-color: yellow'>"); //$NON-NLS-1$)
	  		acc.append("</span>"); //$NON-NLS-1$
	  	}
		return null;
	}
	  public Object visit(ASTExpressionExpression node, Object data) {
		return null;
	}
	  public Object visit(ASTStatementExpression node, Object data) {
		return null;
	}
	  public Object visit(ASTReferenceExpression node, Object data) {
	  	return null;
	  }
	  public Object visit(ASTIfStatement node, Object data) {
		return null;
	}
	  public Object visit(ASTWhileStatement node, Object data) {
		return null;
	}
	  public Object visit(ASTForeachStatement node, Object data) {
		return null;
	}
	  public Object visit(ASTMethod node, Object data) {
		return null;
	}
	  public Object visit(ASTArrayAccess node, Object data) {
		return null;
	}
	  public Object visit(ASTSizeMethod node, Object data) {
		return null;
	}
	  public Object visit(ASTReference node, Object data) {
		return null;
	}


}
